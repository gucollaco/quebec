<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{title}}</title>

    {{#if head.onsenui}}
    <script src="/onsenui/js/onsenui.js"></script>

    <link rel="stylesheet" href="/onsenui/css/onsenui.css">
    <link rel="stylesheet" href="/onsenui/css/onsen-css-components.css">
    <link rel="stylesheet" href="/bootstrap/dist/css/bootstrap.min.css">
    {{/if}}

    <link rel="stylesheet" href="/css/main.css">

    <script src="js/app.js"></script>
    <script src="js/services.js"></script>
    <script src="js/controllers.js"></script>
</head>

<body>

{{{body}}}

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBXkuJm0jYAjeyqsqxeT8fByvvUPa8Atts"></script> 
    <script src="/jquery/dist/jquery.min.js"></script>   
    <script src="/bootstrap/dist/js/bootstrap.bundle.min.js"></script>   
    
    <script>
        var map
        var options
        var geocoder

        function getGeocode(){
            return new Promise((resolve, reject) => {
                
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                    function(position) {
                        var pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };

                        resolve(pos)
                    }, 
                    function() {
                        handleLocationError(true, infoWindow, map.getCenter());
                        reject()
                    })
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false, infoWindow, map.getCenter());
                    reject()
                }
            })
        }

        function initMap(at, coords, no_marker=false, center) {
            if(at == undefined) at = document.getElementById('map')
            options = {
                zoom: 15,
                center: center
            }
            
            map = new google.maps.Map(at, options);

            // Call the codeAddress function (once) when the map is idle (ready)
            if(coords == undefined){
                google.maps.event.addListenerOnce(map, 'idle', codeAddress);
            }

            // Try HTML5 geolocation.
            let fn = ((lat, lng) => {
                return new Promise(resolve => {
                    resolve({lat, lng, marker:true})
                })
            })
            if(coords == undefined){
                fn = getGeocode
                coords = {}
            }

            if(!no_marker){
                fn(coords.x, coords.y).then(pos => {
                    if(pos.marker){
                        pos.marker = undefined
                    
                        var marker = new google.maps.Marker({
                            map: map,
                            position: new google.maps.LatLng(pos.lat, pos.lng)
                        });
                        
                        marker.setMap(map);
                    }else{
                        // Geolocation
                        var infoWindow = new google.maps.InfoWindow;
                        infoWindow.setPosition(pos);
                        infoWindow.setContent('<h3>Você está aqui.</h3>');
                        infoWindow.open(map);
                    }


                    map.setCenter(pos);
                })
            }
                
        }

        function codeAddress() {
            // percorrer para cada imovel - for()
            var url = '/api/imovel'
            $.ajax({
                type: "GET",
                url: url,
                data: null,
                success: function(datas) {
                    datas.data.filter(d => !!d.coords).forEach(function(data) {
                        
                        // Define address to center map to
                        var address = data.endereco;
                        
                        let geocoder = new google.maps.Geocoder();
                        geocoder.geocode({
                            'address': address
                        }, function (results, status) {

                            if (status == google.maps.GeocoderStatus.OK) {

                                // Center map on location
                                map.setCenter(results[0].geometry.location);

                                // Add marker on location
                                var marker = new google.maps.Marker({
                                    map: map,
                                    position: results[0].geometry.location
                                });
                                var infoWindow = new google.maps.InfoWindow({
                                    content: `<h3>${address}</h3>`
                                });
                                marker.addListener('click', function() {
                                    infoWindow.open(map, marker);
                                })

                    
                                getGeocode().then(pos => {
                                    map.setCenter(pos)
                                })

                            } else {

                                alert("Geocode was not successful for the following reason: " + status);
                            }
                        });
                    })
                }
            });

        }

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation ?
                                'Error: The Geolocation service failed.' :
                                'Error: Your browser doesn\'t support geolocation.');
            infoWindow.open(map);
        }
    </script>
    <script>
        $(document).on('change', '#rangeDistancia', function() {
            //console.log($("#rangeDistancia").val() + ' km')
            $("#inputDistancia").show();
            $("#inputDistancia").text($("#rangeDistancia").val() + ' km');
        });
        $(document).on('click', '#btnMostrarMais', function() {
            let visible = !!$("#divMaisFiltros").data('visible')
            $("#divMaisFiltros").data('visible', !visible)
            if(!visible){
                $("#divMaisFiltros").show();
            }else{
                $("#divMaisFiltros").hide();
            }
        });
        $(document).on('click', '#fabToggleMap', function() {
            if($('#areaMap').css('display') == 'none') {
                $("#areaCard").hide();
                $("#areaMap").show();
            } else {
                $("#areaMap").hide();
                $("#areaCard").show();
            }
        });
        var lastSearch = ''
        $(document).on('keydown', '#inputAddress', function(){
            let value = $(this).val()

            if(value != lastSearch){
                $('#result-list').empty()
                
                let url = '/api/imovel'
                $.ajax({
                    type: "GET",
                    url: url,
                    data: {localizacao: value},
                    success: function(data) {
                    datas = data.data
                    if(data.success) {
                        datas.forEach(function(data) {
                            myApp.services.imovel.create(data, '#result-list');
                        });
                    } else {
                        console.log('load problem')
                    }
                    }
                });
            }

            lastSearch = value
        })
        $(document).on('click', '.imovel-card', function(){
            document.querySelector('#myNavigator').pushPage('html/imovel.html', {
                data: {
                    imovel: this.data,
                    title: 'Imóvel'
                }
            })
        })
        $(document).on('click', '#fabAvaliar', function(){
            document.querySelector('#myNavigator').pushPage('html/score.html', {
                data: {
                    imovel: this.data,
                    title: 'Avaliação'
                }
            })
        })
        $(document).on('change', '.submit-avaliacao', function(){
            let selected_values = $('.submit-avaliacao').toArray().map((v) => $(v).val())
            console.log(selected_values)
            if(selected_values.includes('') || selected_values.reduce((acc, cur) => acc || (cur.constructor.name == `Array` && cur.length == 0), false)) { 
            } else {
                $('#areaSubmitAvaliacao button').get(0).data = selected_values
                $('#areaSubmitAvaliacao button').prop('disabled', false)
            }
        })

        $(document).on('click', '#areaSubmitAvaliacao button', function(){
            console.log('SEND TO API')
            console.log(this.data)
            $(document.querySelector('ons-back-button')).click()
        })

        $(document).on('change', '.confirmar-cadastro', function(){
            let selected_values = $('.confirmar-cadastro').toArray().map((v) => {
                return {
                    name: $(v).attr('id'),
                    value: $(v).val()
                }
            })

            let confirm = selected_values.filter(v => v.value == '').length > 0
            if(confirm) { 
                $('#areaConfirmar').css('display', 'none')
                $('#areaProximo').css('display', '')
            } else {
                $('#areaConfirmar').get(0).data = selected_values
                $('#areaConfirmar').css('display', '')
                $('#areaProximo').css('display', 'none')
            }
        })

        /*$(document).on('click', '#areaConfirmar button', function(){
            console.log('SEND TO API')
            console.log(this.data)

            document.querySelector('#myNavigator').resetToPage('html/splitter.html', {
                data: {
                    imovel: this.data,
                    title: ''
                }
            })
        })*/
    </script>
</body>

</html>